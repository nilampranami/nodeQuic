/**
 * @param{{offset: Number, buffer: Uint8Array, size: Number}} bs
 * @param{Number|bigint} int
 */
export function writeVarInt(bs: {
    offset: number;
    buffer: Uint8Array;
    size: number;
}, int: number | bigint): void;
export class BrowserParser extends ParserBase {
    static WS_CONTINUE: number;
    static WS_TEXT: number;
    static WS_BINARY: number;
    static WS_CLOSE: number;
    static WS_PING: number;
    static WS_PONG: number;
    /**
     * @param {import('../../types.js').ParserWebsocketInit} stream
     */
    constructor({ ws, nativesession, isclient, initialStreamSendWindowOffsetUnidi, initialStreamSendWindowOffsetBidi, initialStreamReceiveWindowOffset, streamShouldAutoTuneReceiveWindow, streamReceiveWindowSizeLimit }: import('../../types.js').ParserWebsocketInit);
    ws: WebSocket;
    /** @type {Buffer|undefined} */
    saveddata: Buffer | undefined;
    /** @type {Number|undefined} */
    rtype: number | undefined;
    closesend: boolean;
    /**
     * @param {Uint8Array} data
     */
    parseData(data: Uint8Array): void;
    /**
     * @param{{type: Number, headerVints: Array<Number|bigint>, payload: Uint8Array|undefined, end?: () => void}} bs
     */
    writeCapsule({ type, headerVints, payload, end }: {
        type: number;
        headerVints: Array<number | bigint>;
        payload: Uint8Array | undefined;
        end?: () => void;
    }): boolean;
}
import { ParserBase } from "../parserbase.js";
//# sourceMappingURL=browserparser.d.ts.map